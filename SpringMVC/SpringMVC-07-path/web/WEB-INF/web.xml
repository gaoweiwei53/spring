<?xml version="1.0" encoding="GBK"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--注册DispatcherServlet
        需要在tomcat启动后，创建DispatcherServlet对象实例
        DispatcherServlet创建过程中会同时创建springmvc容器对象
        读取springmvc的配置文件，把这个配置文件中的对象都创建好，当
        用户发起请求就可以直接使用对象了

        DispatcherServlet的init()方法中
            // 创建容器，读取配置文件
            WebApplicationContext ctx =  new ClassPathXmlApplicationContext("springmvc.xml")
            // 把容器对象放入到ServletContext中
            getServletContext().setAttribute(key,ctx);
        -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--springmvc容器创建时，读取配置文件默认是/WEB-INF/servlet-name-servlet.xml-->
        <!-- 自定义springmvc读取配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--在tomcat启动后，创建servlet对象
        load-on-startup：表示tomcat启动后创建对象的顺序，数值 越小，创建越早-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
            <servlet-name>springmvc</servlet-name>
        <!--
        使用框架的时候，url-pattern可以使用两种值
        1. 使用扩展名方式，语法 *.xxx, xxx是自定义的扩展名。常用的方式 *.do, *.action, *.mvc等等
        2.使用斜杠 /
        当项目中使用了 / ,它会替代tomcat中的default。导致所有的静态资源都给DispatcherServlet处理，但是默认情况下DispatcherServlet没有处理静态资源的能力
                -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--声明过滤器，解决post请求中文乱码问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制应答对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- /* 表示所有的请求先通过过滤器-->
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>